// <auto-generated />
using HeadHunterTest.Database;
using HeadHunterTest.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace HeadHunterTest.Web.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20171126120451_Edit_Notes")]
    partial class Edit_Notes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("HeadHunterTest.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("HeadHunterTest.Domain.Entities.Employment", b =>
                {
                    b.Property<int>("EmploumentId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("EmploumentId");

                    b.ToTable("Employment");
                });

            modelBuilder.Entity("HeadHunterTest.Domain.Entities.Note", b =>
                {
                    b.Property<Guid>("ResumeId");

                    b.Property<Guid>("VacancyId");

                    b.Property<bool>("IsEmployer");

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.HasKey("ResumeId", "VacancyId", "IsEmployer");

                    b.HasIndex("VacancyId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("HeadHunterTest.Domain.Entities.ProfessionalArea", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ProfessionalAreas");
                });

            modelBuilder.Entity("HeadHunterTest.Domain.Entities.Resume", b =>
                {
                    b.Property<Guid>("ResumeGuid");

                    b.Property<Guid>("CityGuid");

                    b.Property<DateTimeOffset>("DateResume");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("EmploymentId");

                    b.Property<Guid>("JobSeekerGuid");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("ProfAreaGuid");

                    b.Property<decimal>("Salary");

                    b.Property<double>("WorkExpirience");

                    b.HasKey("ResumeGuid");

                    b.HasIndex("CityGuid");

                    b.HasIndex("EmploymentId");

                    b.HasIndex("JobSeekerGuid");

                    b.HasIndex("ProfAreaGuid");

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("HeadHunterTest.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("RoleName");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("HeadHunterTest.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserGuid");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("IdCity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PasswordSalt")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("RoleId");

                    b.HasKey("UserGuid");

                    b.HasIndex("IdCity");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("HeadHunterTest.Domain.Entities.Vacancy", b =>
                {
                    b.Property<Guid>("VacancyGuid");

                    b.Property<Guid>("CityGuid");

                    b.Property<DateTimeOffset>("DateVacancy");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("EmployerId");

                    b.Property<int>("EmploymentId");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("ProfAreaGuid");

                    b.Property<decimal>("Salary");

                    b.Property<double>("WorkExpirience");

                    b.HasKey("VacancyGuid");

                    b.HasIndex("CityGuid");

                    b.HasIndex("EmployerId");

                    b.HasIndex("EmploymentId");

                    b.HasIndex("ProfAreaGuid");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("HeadHunterTest.Domain.Entities.Employer", b =>
                {
                    b.HasBaseType("HeadHunterTest.Domain.Entities.User");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NameOfCompany")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.ToTable("Employer");

                    b.HasDiscriminator().HasValue("Employer");
                });

            modelBuilder.Entity("HeadHunterTest.Domain.Entities.JobSeeker", b =>
                {
                    b.HasBaseType("HeadHunterTest.Domain.Entities.User");

                    b.Property<string>("Citizenship")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("DateOfBirth");

                    b.Property<bool>("Sex");

                    b.ToTable("JobSeeker");

                    b.HasDiscriminator().HasValue("JobSeeker");
                });

            modelBuilder.Entity("HeadHunterTest.Domain.Entities.Note", b =>
                {
                    b.HasOne("HeadHunterTest.Domain.Entities.Resume", "Resume")
                        .WithMany("ResumeVacancies")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HeadHunterTest.Domain.Entities.Vacancy", "Vacancy")
                        .WithMany("ResumeVacancies")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HeadHunterTest.Domain.Entities.Resume", b =>
                {
                    b.HasOne("HeadHunterTest.Domain.Entities.City", "ResumeInCity")
                        .WithMany("Resumes")
                        .HasForeignKey("CityGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HeadHunterTest.Domain.Entities.Employment", "Employment")
                        .WithMany()
                        .HasForeignKey("EmploymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HeadHunterTest.Domain.Entities.JobSeeker", "JobSeeker")
                        .WithMany("Resumes")
                        .HasForeignKey("JobSeekerGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HeadHunterTest.Domain.Entities.ProfessionalArea", "ProfessionalArea")
                        .WithMany("Resumes")
                        .HasForeignKey("ProfAreaGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HeadHunterTest.Domain.Entities.User", b =>
                {
                    b.HasOne("HeadHunterTest.Domain.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("IdCity")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HeadHunterTest.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HeadHunterTest.Domain.Entities.Vacancy", b =>
                {
                    b.HasOne("HeadHunterTest.Domain.Entities.City", "VacanciesInCity")
                        .WithMany("Vacancies")
                        .HasForeignKey("CityGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HeadHunterTest.Domain.Entities.Employer", "Employer")
                        .WithMany("Vacancieses")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HeadHunterTest.Domain.Entities.Employment", "Employment")
                        .WithMany()
                        .HasForeignKey("EmploymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HeadHunterTest.Domain.Entities.ProfessionalArea", "ProfessionalArea")
                        .WithMany()
                        .HasForeignKey("ProfAreaGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
